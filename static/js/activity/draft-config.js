// Generated by LiveScript 1.3.0
(function(){
  ldc.register('period', [], function(){
    var lc, updateHistory, history, view;
    lc = {
      period: ['預設', '提案期', '審查期', '決選發表'],
      selected: 0,
      config: {}
    };
    updateHistory = function(){
      return history.update(lc.config);
    };
    history = new ctrlz({
      obj: JSON.parse(JSON.stringify(lc.config))
    });
    view = new ldView({
      root: document,
      action: {
        input: {
          time: function(arg$){
            var node, evt, cfg, ref$, key$;
            node = arg$.node, evt = arg$.evt;
            cfg = (ref$ = lc.config)[key$ = lc.selected] || (ref$[key$] = {});
            cfg[node.getAttribute('ld')] = node.value;
            return updateHistory();
          },
          name: function(arg$){
            var node, evt;
            node = arg$.node, evt = arg$.evt;
            lc.period[lc.selected] = node.value;
            view.render('period');
            return updateHistory();
          }
        },
        click: {
          nav: function(arg$){
            var node, evt, name, cfg, ref$, key$;
            node = arg$.node, evt = arg$.evt;
            name = evt.target.getAttribute('data-name');
            if (!name) {
              lc.period.push(name = "未命名" + lc.period.length);
              view.render('period');
              return;
            }
            ld$.find(view.get('nav'), '.nav-link.active', 0).classList.remove('active');
            evt.target.classList.add('active');
            lc.selected = lc.period.indexOf(name);
            cfg = (ref$ = lc.config)[key$ = lc.selected] || (ref$[key$] = {});
            view.getAll('switch').map(function(it){
              return it.classList.toggle('on', cfg[it.getAttribute('data-name')] != null);
            });
            view.get('default').classList.toggle('d-none', lc.selected !== 0);
            view.getAll('custom').map(function(it){
              return it.classList.toggle('d-none', lc.selected === 0);
            });
            view.getAll('time').map(function(it){
              return it.value = cfg[it.getAttribute('ld')] || '';
            });
            return view.get('name').value = name;
          },
          'switch': function(arg$){
            var node, evt, cfg, ref$, key$;
            node = arg$.node, evt = arg$.evt;
            node.classList.toggle('on');
            cfg = (ref$ = lc.config)[key$ = lc.selected] || (ref$[key$] = {});
            cfg[node.getAttribute('data-name')] = node.classList.contains('on');
            return updateHistory();
          },
          'delete': function(){
            var ref$;
            if (!lc.selected) {
              return;
            }
            delete lc.period[lc.period[lc.selected]];
            lc.period.splice(lc.selected, 1);
            lc.selected <= (ref$ = lc.period.length - 1) || (lc.selected = ref$);
            return view.render('period');
          }
        }
      },
      init: {
        time: function(arg$){
          var node;
          node = arg$.node;
          return flatpickr(node, {
            enableTime: true,
            dateFormat: "Y-m-d H:i"
          });
        }
      },
      handler: {
        'default': function(){},
        custom: function(){},
        'switch': function(arg$){
          var node, ref$, key$;
          node = arg$.node;
          return node.classList.toggle('on', !!((ref$ = lc.config)[key$ = lc.selected] || (ref$[key$] = {}))[node.getAttribute('data-name')]);
        },
        period: {
          list: function(){
            return lc.period;
          },
          handle: function(arg$){
            var node, data, idx, x$;
            node = arg$.node, data = arg$.data, idx = arg$.idx;
            x$ = node.childNodes[0];
            x$.innerText = data;
            x$.classList.toggle('active', idx === lc.selected);
            x$.setAttribute('data-name', data);
            return x$;
          }
        }
      }
    });
    return document.addEventListener('keydown', function(e){
      var payload;
      if (e.keyCode === 90 && (e.metaKey || e.ctrlKey)) {
        if (e.shiftKey) {
          history.redo();
        } else {
          history.undo();
        }
        payload = JSON.parse(JSON.stringify(history.get()));
        lc.config = payload;
        return view.render();
      }
    });
  });
  return ldc.app('period');
})();