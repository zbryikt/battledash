// Generated by LiveScript 1.3.0
(function(){
  ldc.register('perm2', [], function(){
    var lc2, lc, czmgr, update, updateDebounced, view;
    lc2 = {};
    lc = {
      idx: -1,
      name: "n/a",
      type: 'all'
    };
    lc.cfg = {
      roles: [
        {
          name: "管理員",
          desc: "擁有管理此活動的所有權限，包含設定權限、更改任何設定等。",
          list: [
            {
              name: "Kirby Wu"
            }, {
              name: "David Jones"
            }, {
              name: "Beetle Juice"
            }
          ]
        }, {
          name: "評審",
          desc: "活動的提案評審，擁有個人的評審頁面，其評分表並會匯入評選大表中。",
          config: {},
          list: [
            {
              name: "clkao"
            }, {
              name: "ipa chiu"
            }
          ]
        }
      ]
    };
    lc.picked = lc.cfg.roles[0];
    czmgr = new ctrlz({
      obj: JSON.parse(JSON.stringify(lc))
    });
    update = function(deb){
      var ret;
      update.ret = ret = updateDebounced();
      if (!deb) {
        ret.now();
        return update.ret = null;
      }
    };
    updateDebounced = debounce(function(){
      console.log("update");
      return czmgr.update(lc);
    });
    return view = new ldView({
      root: document.body,
      action: {
        keyup: {
          "role-name": function(arg$){
            var node, name;
            node = arg$.node;
            if (lc2.role) {
              name = node.value;
              if (~lc.cfg.roles.map(function(it){
                return it.name;
              }).indexOf(name) && lc2.role && lc2.role.name !== name) {
                return node.classList.add('is-invalid');
              } else {
                node.classList.remove('is-invalid');
              }
              if (lc2.role.name === lc.name) {
                lc.name = node.value;
              }
              lc2.role.name = node.value;
              console.log('here');
              update(true);
              return view.render();
            }
          }
        },
        click: {
          "new-role": function(){
            var names, i$, i, name;
            names = lc.cfg.roles.map(function(it){
              return it.name;
            });
            for (i$ = 1; i$ < 100; ++i$) {
              i = i$;
              if (!~names.indexOf("角色" + i)) {
                break;
              }
            }
            name = "角色" + (i < 100
              ? i
              : Math.round(Math.random() * 100) + 100);
            lc.cfg.roles.push({
              name: name,
              desc: "自訂角色",
              list: []
            });
            view.render();
            return update();
          },
          "delete-role": function(){
            if (lc.cfg.roles.length <= 1) {
              return alert("最少要有一個角色");
            } else if (~lc.idx) {
              lc.cfg.roles.splice(lc.idx, 1);
              lc.idx = 0;
              lc.name = '';
              lc.type = 'all';
              delete lc2.role;
              update();
              return view.render();
            }
          },
          "toggle-newuser": function(arg$){
            var node;
            node = arg$.node;
            return view.getAll('newuser').map(function(it){
              return it.classList.toggle('d-none');
            });
          },
          'switch': function(arg$){
            var node, evt, c, ref$;
            node = arg$.node, evt = arg$.evt;
            node.classList.toggle('on');
            c = (ref$ = lc.cfg.roles[lc.idx]).cfg || (ref$.cfg = {});
            if (!c) {
              return;
            }
            c[node.getAttribute('data-name')] = node.classList.contains('on');
            return update();
          },
          roles: function(arg$){
            var node, evt, type, name, idx, tabs;
            node = arg$.node, evt = arg$.evt;
            if (!(type = evt.target.getAttribute('data-type'))) {
              return;
            }
            lc.type = type;
            lc.name = name = evt.target.getAttribute('data-name') || "";
            lc.idx = idx = lc.cfg.roles.map(function(it){
              return it.name;
            }).indexOf(lc.name);
            lc2.role = lc.cfg.roles[idx];
            tabs = ld$.find(node, '.nav-link');
            tabs.map(function(it){
              return it.classList.remove('active');
            });
            evt.target.classList.add('active');
            update();
            return view.render();
          },
          "new": function(arg$){
            var node, evt, role, user, idx;
            node = arg$.node, evt = arg$.evt;
            role = (lc.type === 'all'
              ? lc.picked
              : lc2.role) || lc.cfg.roles[0] || {
              name: ''
            };
            user = view.get('new-name').value;
            idx = lc.cfg.roles.map(function(it){
              return it.list;
            }).reduce(function(a, b){
              return a.concat(b);
            }, []).map(function(it){
              return it.name;
            }).indexOf(user);
            if (~idx) {
              return alert("user already exist");
            }
            role.list.push({
              name: user,
              perm: lc.name
            });
            update();
            return view.render();
          }
        }
      },
      handler: {
        newuser: function(){},
        list: function(){},
        all: function(){},
        "new-name": function(){},
        "new-type": function(){},
        role: {
          list: function(){
            return lc.cfg.roles;
          },
          handler: function(arg$){
            var node, data, n;
            node = arg$.node, data = arg$.data;
            n = ld$.find(node, '.nav-link', 0);
            n.classList.toggle('active', data.name === lc.name);
            n.setAttribute('data-name', data.name);
            n.setAttribute('data-type', 'custom');
            return n.innerText = data.name;
          }
        },
        "picked-role": function(arg$){
          var node;
          node = arg$.node;
          return node.innerText = (lc.picked || lc.cfg.roles[0] || {
            name: ''
          }).name;
        },
        "role-name": function(arg$){
          var node, name;
          node = arg$.node;
          node.classList.toggle('d-none', !lc2.role);
          if (lc2.role) {
            node.value = lc2.role.name;
          }
          name = node.value;
          if (~lc.cfg.roles.map(function(it){
            return it.name;
          }).indexOf(name) && lc2.role && lc2.role.name !== name) {
            return node.classList.add('is-invalid');
          } else {
            return node.classList.remove('is-invalid');
          }
        },
        "role-option": {
          list: function(){
            return lc.cfg.roles;
          },
          action: {
            click: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              lc.picked = data;
              return view.render('picked-role');
            }
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            node.setAttribute('value', data.name);
            return node.innerText = data.name;
          }
        },
        "role-desc": {
          list: function(){
            return lc.cfg.roles;
          },
          action: {
            keyup: function(arg$){
              var node, data;
              node = arg$.node, data = arg$.data;
              data.desc = node.innerText;
              return update(true);
            }
          },
          handler: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            node.innerText = data.desc || '';
            node.setAttribute('data-name', data.name);
            return node.classList.toggle('d-none', data.name !== lc.name);
          }
        },
        "role-all": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('active', lc.type === 'all');
        },
        "role-desc-all": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', lc.type !== 'all');
        },
        "roles-desc": function(arg$){
          var node;
          node = arg$.node;
          return ld$.find(node, '[data-name]').map(function(it){
            return it.classList.toggle('d-none', lc.name !== it.getAttribute('data-name'));
          });
        },
        "all-list": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', lc.type !== 'all');
        },
        "custom-list": function(arg$){
          var node;
          node = arg$.node;
          return node.classList.toggle('d-none', lc.type !== 'custom');
        },
        'switch': function(arg$){
          var node, ref$;
          node = arg$.node;
          if (!lc2.role) {
            return;
          }
          return node.classList.toggle('on', !!((ref$ = lc2.role).cfg || (ref$.cfg = {}))[node.getAttribute('data-name')]);
        },
        user: {
          list: function(){
            if (!lc2.role) {
              return lc.cfg.roles.map(function(r){
                return r.list.map(function(it){
                  return it.perm = r.name, it;
                });
              }).reduce(function(a, b){
                return a.concat(b);
              }, []);
            } else {
              return (lc2.role.list || []).map(function(it){
                return it.perm = lc2.role.name, it;
              });
            }
          },
          handler: function(arg$){
            var node, data, that;
            node = arg$.node, data = arg$.data;
            ld$.find(node, 'b', 0).innerText = data.name;
            if (that = ld$.find(node, '.text-muted', 0)) {
              return that.innerText = data.perm;
            }
          },
          action: {
            click: function(arg$){
              var node, data, evt, idx, list;
              node = arg$.node, data = arg$.data, evt = arg$.evt;
              if (!evt.target.classList.contains('i-close')) {
                return;
              }
              idx = lc.cfg.roles.map(function(it){
                return it.name;
              }).indexOf(data.perm);
              if (!~idx) {
                return;
              }
              list = lc.cfg.roles[idx].list;
              if (!~list.indexOf(data)) {
                return;
              }
              list.splice(list.indexOf(data), 1);
              view.render('user');
              return update();
            }
          }
        },
        nav: function(){}
      }
    }, document.addEventListener('keydown', function(e){
      var promise, p;
      if (e.keyCode === 90 && (e.metaKey || e.ctrlKey)) {
        promise = update.ret
          ? (p = update.ret, update.ret.now(), update.ret = null, p.then(function(){
            return czmgr.update(lc);
          }))
          : Promise.resolve();
        return promise.then(function(){
          console.log(1);
          czmgr.undo();
          import$(lc, JSON.parse(JSON.stringify(czmgr.get())));
          lc2.role = lc.cfg.roles[lc.idx];
          return view.render();
        });
      }
    }));
  });
  return ldc.app('perm');
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}